# create the test
test <- iris[-indexes, ]
install.packages('tree')
library(tree)
model <- tree(
formula = Species ~ .,
data = train
)
summary(model)
# visualize the tree model
plot(model)
text(model)
# visualize the tree model
plot(model)
text(model)
# Create color pallete
library(RColorBrewer)
palette <- brewer.pal(3, 'Set2')
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col =
)
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = 'red'
)
?tree
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)]
)
palette <- brewer.pal(3, 'Set2')
# Create color pallete
library(RColorBrewer)
install.packages("RColorBrewer")
install.packages('dplyr')
palette <- brewer.pal(3, 'Set2')
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)]
)
# caret package
install.packages('caret')
?e1071
??e1071
??svm
# Create the Naive Bayes Model
library(e1071)
?`e1071-deprecated`
?svm
library(caret)
install.packages('caret')
library(caret)
confusionMatrix(cm)
setwd("~/Artificial Intelligence/R-ML-Projects/product-purchase-prediction")
dataset <- read.csv('Social_Network_Ads.csv', sep = '\t')
?read.csv
head(dataset)
nrow(dataset)
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
dataset = dataset[3:5]
dataset
# splitting data with caTools
library(caTools)
set.seed(123)
?sample.split
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
head(training_set)
nrow(training_set)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
head(training_set)
# Create the Naive Bayes Model
library(e1071)
classifier <- naiveBayes(
x = training_set[-3],
y = training_set$Purchased
)
# Test set predictions
test_pred = predict(
object = classifier,
newdata = test_set[-3]
)
test_pred
# Confusion matrix
cm = table(test_set$Purchased, test_pred )
cm
# install.packages('caret')
library(caret)
confusionMatrix(cm)
classifier <- svm(
x = training_set[-3],
y = training_set$Purchased
)
# Test set predictions
test_pred = predict(
object = classifier,
newdata = test_set[-3]
)
test_pred
# Confusion matrix
cm = table(test_set$Purchased, test_pred )
cm
# install.packages('caret')
library(caret)
confusionMatrix(cm)
setwd("~/Artificial Intelligence/R-ML-Projects/load-default-prediction")
loan <- read.csv('lending_club_data01.csv')
head(loan)
colnames(loan)
str(loan)
loan$bad_loans = factor(loan$bad_loans)
str(loan)
sum(is.na(loan))
# Split into training and testing
library(caTools)
split = sample.split(loan, SplitRatio = 0.8)
train <- subset(loan, split == TRUE)
)
)
train <- subset(loan, split == TRUE)
test <- subset(loan, split == FALSE )
nrow(loan)
nrow(train)
nrow(test)
library(e1071)
classifier <- naiveBayes(
x = loan[-c('bad_loans')]
)
classifier <- naiveBayes(
x = loan[-'bad_loans']
)
colnames(loan)
?naiveBayes
classifier <- naiveBayes(
x = loan[-7],
y = loan$bad_loans
)
test_pred <- predict(test[-7])
test_pred <- predict(classifier, test[-7])
# Create confusion matrix
table(test_pred, test$bad_loans)
library(caret)
# Create confusion matrix
cm <- table(test_pred, test$bad_loans)
library(caret)
confusionMatrix(cm)
classifier <- svm(
x = loan[-7],
y = loan$bad_loans
)
test_pred <- predict(classifier, test[-7])
# Create confusion matrix
cm <- table(test_pred, test$bad_loans)
library(caret)
confusionMatrix(cm)
classifier <- knn3(
x = loan[-7],
y = loan$bad_loans
)
test_pred <- predict(classifier, test[-7])
# Create confusion matrix
cm <- table(test_pred, test$bad_loans)
library(caret)
confusionMatrix(cm)
library(tree)
classifier <- tree(
x = loan[-7],
y = loan$bad_loans
)
test_pred <- predict(classifier, test[-7])
# Create confusion matrix
cm <- table(test_pred, test$bad_loans)
library(caret)
confusionMatrix(cm)
classifier <- naiveBayes(
x = loan[-7],
y = loan$bad_loans
)
test_pred <- predict(classifier, test[-7])
# Create confusion matrix
cm <- table(test_pred, test$bad_loans)
library(caret)
confusionMatrix(cm)
classifier <- svm(
x = loan[-7],
y = loan$bad_loans
)
test_pred <- predict(classifier, test[-7])
# Create confusion matrix
cm <- table(test_pred, test$bad_loans)
library(caret)
confusionMatrix(cm)
setwd("~/Artificial Intelligence/R-ML-Projects/mtcars")
cars <- read.csv('Cars.csv')
head(cars)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.8)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart)
library(rpart) # recursive partitioning
decisionTree <- rpart(am ~ . , data = mtcars, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, mtcars$am)
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
library(e1071)
decisionTree <- svm(am ~ . , data = mtcars, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
decisionTree <- naiveBayes(am ~ . , data = mtcars, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
decisionTree <- rpart(am ~ . , data = mtcars, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
setwd("~/Artificial Intelligence/R-ML-Projects/iris-specie-prediction")
library(rpart)
decisionTree <- rpart(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.8)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- rpart(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(rpart) # recursive partitioning
library(e1071)
confusionMatrix(test_pred, test$am)
decisionTree <- svm(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.8)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- svm(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
split <- sample.split(Y = mtcars, SplitRatio = 0.6)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- svm(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
decisionTree <- rpart(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.6)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- rpart(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.6)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- naiveBayes(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.6)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- svm(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.5)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- svm(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.5)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- rpart(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
head(mtcars)
colnames(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$vs <- as.factor(mtcars$vs)
sum(is.na(mtcars))
# Split data
library(caTools)
split <- sample.split(Y = mtcars, SplitRatio = 0.9)
train <- subset(x = mtcars, split == TRUE)
test <- subset(x = mtcars, split == FALSE)
str(train)
nrow(train)
nrow(test)
library(rpart) # recursive partitioning
library(e1071)
decisionTree <- rpart(am ~ . , data = train, method = 'class')
test_pred <- predict(object = decisionTree, newdata = test, type = 'class')
cm <- table(test_pred, test$am)
cm
library(caret)
confusionMatrix(test_pred, test$am)
library(caTools)
split <- sample.split(Y = iris, SplitRatio = 0.8)
train <- subset(x = iris, split == TRUE)
)
)
)
)
test <- subset(x = iris, split == FALSE)
nrow(train)
nrow(test)
str(train)
decisionTreeModel <- rpart(Species ~ . , data = train)
test_pred <- predict(object = decisionTreeModel, newdata = test)
cm <- table(test_pred, test$Species)
length(test_pred)
length(test$Species)
length(test)
colnames(iris)
test_pred <- predict(object = decisionTreeModel, newdata = test[-5])
cm <- table(test_pred, test$Species)
test_pred <- predict(object = decisionTreeModel, newdata = test[-5], method = 'class')
cm <- table(test_pred, test$Species)
length(test_pred)
length(test)
train
split <- sample.split(Y = iris, SplitRatio = 0.8)
train <- subset(x = iris, split == TRUE)
test <- subset(x = iris, split == FALSE)
nrow(train)
nrow(test)
train
?sample.split
test
iris
head(train)
head(test)
test[-5]
decisionTreeModel <- rpart(Species ~ . , data = train, method = 'class')
colnames(iris)
test_pred <- predict(object = decisionTreeModel, newdata = test[-5], method = 'class')
test_pred
test_pred <- predict(object = decisionTreeModel, newdata = test[-5], type = 'class')
test_pred
cm <- table(test_pred, test$Species)
?predict
cm
library(caret)
confusionMatrix(cm)
