2 + 2
x <- 18
x / 24
x <- 'My name is ghaff'
x
y <- 'Really?'
y
y + x
z = 4
x
<
z
clearPushBack()
clear
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R for ds/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/basics.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/vectors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/factors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/factors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/factors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/factors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/factors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/factors.R', echo=TRUE)
source('~/Artificial Intelligence/DataScience/R101/factors.R', echo=TRUE)
isGoodRating(9)
print(12)
tryCatch(10 + 10)
tryCatch(10 + "a", error=function(e) {
print('An error occured')
})
print(5)
as.integer('A
')
as.integer('2
')
data()
help(CO2)
x <- 1:5
x
a <- b <- c <- 5
rm(x)
rm(z)
rm(y, years)
?datasets
?airmiles
data(airmiles)
airmiles
str(airmiles)
rm(list = ls())
x <- 0:10
?seq
seq(10)
x4 <- seq(30, 0 , by = -3)
x5 <- scan()
x5 <- scan()
x5
ls
ls()
rm(list = ls())
breast_cancer <- read.csv("~/Artificial Intelligence/ml-projects/breast-cancer-prediction/breast_cancer.csv")
View(breast_cancer)
breast_cancer <- read.csv('~/Artificial Intelligence/ml-projects/breast-cancer-prediction/breast_cancer.csv')
breast_cancer
head(breast_cancer)
head(breast_cancer)
str(breast_cancer)
View(breast_cancer)
breast_cancer['target']
breast_cancer[1,]
breast_cancer[1, c('area.error', 'smoothness.error')]
str(CO2)
write.csv(breast_cancer, 'new_breast.csv', row.names = FALSE)
write.csv(breast_cancer, 'new_breast.csv', row.names = FALSE)
install.packages('xlsx')
install.packages('readxl')
write.xlsx(breast_cancer, file='breast_cancer.xlsx', sheetName='Sheet1', row.names=FALSE)
write.xlsx(breast_cancer, file='breast_cancer.xlsx', sheetName='Sheet1', row.names=FALSE)
# count the characters of a string
myChar <- 'Ghaff Muda'
nchar(myChar)
# to Upper case
toupper(myChar)
# to lower case
tolower(myChar)
# replace
chartr(' ', '-', myChar)
# split
char_list <- strsplit(myChar, ' ')
char_list
char_list[0]
word_list <- unlist(char_list)
word_list
word_list[0]
sorted_list <- sort(word_list)
sorted_list
# concatenate the elements of a charater vector
paste(sorted_list, " ")
# concatenate the elements of a charater vector
paste(sorted_list,collapse = " ")
# get parts of a string
sub_string <- substr(myChar, start=1, stop = 4)
sub_string
trimws(sub_string)
library(stringr)
str_sub(myChar, -8, -1)
as.Date('2020-10-10')
birth <- as.Date('2020-10-10')
str(birth)
birth <- as.Date('2020/10/10', '%y/%m/%d')
str(birth)
birth <- as.Date('2020/10/10', '%Y/%m/%d')
str(birth)
Sys.Date()
date()
Sys.time()
weekdays(Sys.Date())
months(Sys.Date())
people <- data.frame(
'Name' = c('John Doe', 'Jane Doe', 'Mack Mann'),
'Email' = c('jadoe@gmail.com', 'doej@gmail.com', 'ghaff@gmail.com')
)
head(people)
people <- data.frame(
'Name' = c('John Doe', 'Jane Doe', 'Mack Mann'),
'Email' = c('jadoe@gmail.com', 'doej@gmail.ca', 'ghaff@gmail.com')
)
head(people)
grep('@.*', people['Name'])
grep('@.*', people['Email'])
grep('@.*', people['Email'], value=TRUE)
people['Email']
grep('@.*', c('ghaff@gmail.com'))
grep('@.*', people['Email'][1,], value=TRUE)
grep('@.*', c('ghaff@gmail.com'), value=TRUE)
people <- rbind(people, c('wal', 'not an email'))
head(people)
people <- rbind(people, Name = 'Wal', Email = 'not an email')
head(people)
gsub('@.*', '@hotmail.com', c('test@test.com', 'not an email', 'ghaff@gmail.com'))
gsub(:@.*"", '@hotmail.com', c('test@test.com', 'not an email', 'ghaff@gmail.com'))
gsub("@.*", '@hotmail.com', c('test@test.com', 'not an email', 'ghaff@gmail.com'))
matches <- regexpr("@.*", c('test@test.com', 'not an email', 'wal@gmail.com'))
matches
regmatches(c('test@test.com', 'not an email', 'wal@gmail.com'), matches)
people
matches <- regexpr("@.*\\.", people[, 'Email'])
people['Domain'] <- regmatches(people[, 'Email'], matches)
people['Domain'] = regmatches(people[, 'Email'], matches)
people
matches <- regexpr("@.*\\.", people[, 'Email'])
people[,'Domain'] = regmatches(people[, 'Email'], matches)
people <- data.frame(
'Name' = c('John Doe', 'Jane Doe', 'Mack Mann'),
'Email' = c('jadoe@gmail.com', 'doej@gmail.ca', 'ghaff@gmail.com')
)
people
matches <- regexpr("@.*\\.", people[, 'Email'])
people[,'Domain'] = regmatches(people[, 'Email'], matches)
people
"Apples" = "Banana"
print(num)
for (num in c(1,2,3)) {
print(num)
}
grep("milk.+", c("cow's milk", "milkshake", "milky", "cat", "milk1", "milk"), value = T)
full_name <- "John Doe"
unlist(strsplit(full_name))
unlist(strsplit(full_name, " "))
strsplit(full_name, " ")
drinks <- factor(c(“tea”, “coffee”, “soft drink”, “tea”, “hot chocolate”, “hot chocolate”, “coffee”))
drinks <- factor(c("tea", "coffee", "soft drink", "tea", "hot chocolate", "hot chocolate", "coffee"))
drinkgs
drinks
people$Email <- NA
people
people$Email <- NULL
people
people[1]
people[,1]
people[,2]
head(iris)
summary(iris)
plot(iris)
dev.off()
install.packages('pacman')
install.packages("pacman")
install.packages('dplyr')
head(iris)
head(iris)
plot(iris$Sepal.Length)
plot(iris$Petal.Length)
plot(iris$Species)
plot(iris$Sepal.Length) # Quantitative Variable
plot(iris$Species, iris$Petal.Width)
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width,
col='red')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width',
xlim = 'Petal Length')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width',
xlab = 'Petal Length')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width',
xlab = 'Petal Length',
ylab = 'Petal Width')
# Plot with formulas
plot(cos, 0, 2*pi)
plot(exp, 0, 5)
# Plot with formulas
plot(cos, 0, 2*pi, col='red')
# Plot with formulas
plot(cos, 0, 2*pi, col='red', lwd=5)
head(mtcars)
cylinders <- table(mtcars$cyl)
View(breast_cancer)
cylinders <- table(mtcars$cyl)
barplot(cylinders)
plot(cylinders)
barplot(cylinders)
hist(iris$Sepal.Length)
par(mfrow=c(3,1))
par(mfrow=c(3,1))
hist(iris$Petal.Length[iris$Species == 'setosa'],
xlim = c(0,3),
breaks = 9,
main = 'Petal length for setosa',
xlab = '',
col = 'red')
hist(iris$Petal.Width[iris$Species == 'versiColor'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'versicolor'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'virginca'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'Virginca'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9)
par(mfrow=c(1,1))
hist(iris$Petal.Width[iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9)
#univariate
hist(mtcars$wt)
hist(mtcars$mpg)
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = 'red',
xlab = 'wt',
ylab = 'mpg')
?lynx
head(lynx)
hist(lynx)
hist(lynx,
breaks = 14,
freq = FALSE,
col = 'thistle1',
main = paste('Histogram of Annual Canadian Lynx', 'Trappings', '183-32'))
curve(
dnorm(x, mean = mean(lynx), sd = sd(lynx
),
col = 'thistle4',
lwd=2,
add = TRUE)
)
curve(
dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = 'thistle4',
lwd=2,
add = TRUE)
lines(density(lynx), col = 'blue', lwd = 2)
lines(density(lynx, adjust = 3))
# Rug plot
rug(lynx, lwd = 2, col = 'gray
')
# Rug plot
rug(lynx, lwd = 2, col = 'gray')
summary(iris$Species)
summary(iris$Sepal.Length)
summary(iris)
install.packages('psych')
library(psych)
describe(iris$Sepal.Length)
describe(iris)
iris$Petal.Length[iris$Petal.Length < 2
]
count(iris$Petal.Length[iris$Petal.Length < 2
])
install.packages('rio')
q()
install.packages('tree')
library(tree)
model <- tree(
formula = Species ~ .,
data = train
)
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes <- sample(x = 1:150, size = 100)
# inspect the random indexes
print(indexes)
# create the training dataset
train <- iris[indexes, ]
# create the test
test <- iris[-indexes, ]
install.packages('tree')
library(tree)
model <- tree(
formula = Species ~ .,
data = train
)
summary(model)
# visualize the tree model
plot(model)
text(model)
# visualize the tree model
plot(model)
text(model)
# Create color pallete
library(RColorBrewer)
palette <- brewer.pal(3, 'Set2')
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col =
)
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = 'red'
)
?tree
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)]
)
palette <- brewer.pal(3, 'Set2')
# Create color pallete
library(RColorBrewer)
install.packages("RColorBrewer")
install.packages('dplyr')
palette <- brewer.pal(3, 'Set2')
# create a scatter plot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)]
)
# caret package
install.packages('caret')
?e1071
??e1071
??svm
# Create the Naive Bayes Model
library(e1071)
?`e1071-deprecated`
?svm
library(caret)
install.packages('caret')
library(caret)
confusionMatrix(cm)
# Visualizing your training result
# library()
?merge
library(caret)
install.packages('caret')
library(caret)
dataset <- read.csv('Social_Network_Ads.csv', sep = '\t')
?read.csv
head(dataset)
nrow(dataset)
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
dataset = dataset[3:5]
dataset
setwd("~/Artificial Intelligence/R-ML-Projects/product-purchase-prediction")
dataset <- read.csv('Social_Network_Ads.csv', sep = '\t')
?read.csv
head(dataset)
nrow(dataset)
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
dataset = dataset[3:5]
dataset
# splitting data with caTools
library(caTools)
set.seed(123)
?sample.split
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
head(training_set)
nrow(training_set)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
head(training_set)
# Create the Naive Bayes Model
library(e1071)
classifier <- naiveBayes(
x = training_set[-3],
y = training_set$Purchased
)
# Test set predictions
test_pred = predict(
object = classifier,
newdata = test_set[-3]
)
test_pred
# Confusion matrix
cm = table(test_set$Purchased, test_pred )
cm
install.packages('caret')
install.packages("caret")
quit()
