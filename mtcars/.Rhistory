# to lower case
tolower(myChar)
# replace
chartr(' ', '-', myChar)
# split
char_list <- strsplit(myChar, ' ')
char_list
char_list[0]
word_list <- unlist(char_list)
word_list
word_list[0]
sorted_list <- sort(word_list)
sorted_list
# concatenate the elements of a charater vector
paste(sorted_list, " ")
# concatenate the elements of a charater vector
paste(sorted_list,collapse = " ")
# get parts of a string
sub_string <- substr(myChar, start=1, stop = 4)
sub_string
trimws(sub_string)
library(stringr)
str_sub(myChar, -8, -1)
as.Date('2020-10-10')
birth <- as.Date('2020-10-10')
str(birth)
birth <- as.Date('2020/10/10', '%y/%m/%d')
str(birth)
birth <- as.Date('2020/10/10', '%Y/%m/%d')
str(birth)
Sys.Date()
date()
Sys.time()
weekdays(Sys.Date())
months(Sys.Date())
people <- data.frame(
'Name' = c('John Doe', 'Jane Doe', 'Mack Mann'),
'Email' = c('jadoe@gmail.com', 'doej@gmail.com', 'ghaff@gmail.com')
)
head(people)
people <- data.frame(
'Name' = c('John Doe', 'Jane Doe', 'Mack Mann'),
'Email' = c('jadoe@gmail.com', 'doej@gmail.ca', 'ghaff@gmail.com')
)
head(people)
grep('@.*', people['Name'])
grep('@.*', people['Email'])
grep('@.*', people['Email'], value=TRUE)
people['Email']
grep('@.*', c('ghaff@gmail.com'))
grep('@.*', people['Email'][1,], value=TRUE)
grep('@.*', c('ghaff@gmail.com'), value=TRUE)
people <- rbind(people, c('wal', 'not an email'))
head(people)
people <- rbind(people, Name = 'Wal', Email = 'not an email')
head(people)
gsub('@.*', '@hotmail.com', c('test@test.com', 'not an email', 'ghaff@gmail.com'))
gsub(:@.*"", '@hotmail.com', c('test@test.com', 'not an email', 'ghaff@gmail.com'))
gsub("@.*", '@hotmail.com', c('test@test.com', 'not an email', 'ghaff@gmail.com'))
matches <- regexpr("@.*", c('test@test.com', 'not an email', 'wal@gmail.com'))
matches
regmatches(c('test@test.com', 'not an email', 'wal@gmail.com'), matches)
people
matches <- regexpr("@.*\\.", people[, 'Email'])
people['Domain'] <- regmatches(people[, 'Email'], matches)
people['Domain'] = regmatches(people[, 'Email'], matches)
people
matches <- regexpr("@.*\\.", people[, 'Email'])
people[,'Domain'] = regmatches(people[, 'Email'], matches)
people <- data.frame(
'Name' = c('John Doe', 'Jane Doe', 'Mack Mann'),
'Email' = c('jadoe@gmail.com', 'doej@gmail.ca', 'ghaff@gmail.com')
)
people
matches <- regexpr("@.*\\.", people[, 'Email'])
people[,'Domain'] = regmatches(people[, 'Email'], matches)
people
"Apples" = "Banana"
print(num)
for (num in c(1,2,3)) {
print(num)
}
grep("milk.+", c("cow's milk", "milkshake", "milky", "cat", "milk1", "milk"), value = T)
full_name <- "John Doe"
unlist(strsplit(full_name))
unlist(strsplit(full_name, " "))
strsplit(full_name, " ")
drinks <- factor(c(“tea”, “coffee”, “soft drink”, “tea”, “hot chocolate”, “hot chocolate”, “coffee”))
drinks <- factor(c("tea", "coffee", "soft drink", "tea", "hot chocolate", "hot chocolate", "coffee"))
drinkgs
drinks
people$Email <- NA
people
people$Email <- NULL
people
people[1]
people[,1]
people[,2]
head(iris)
summary(iris)
plot(iris)
dev.off()
install.packages('pacman')
install.packages("pacman")
install.packages('dplyr')
head(iris)
head(iris)
plot(iris$Sepal.Length)
plot(iris$Petal.Length)
plot(iris$Species)
plot(iris$Sepal.Length) # Quantitative Variable
plot(iris$Species, iris$Petal.Width)
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width,
col='red')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width',
xlim = 'Petal Length')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width',
xlab = 'Petal Length')
plot(iris$Petal.Length, iris$Petal.Width,
col='red',
main = 'Petal Length vs Petal Width',
xlab = 'Petal Length',
ylab = 'Petal Width')
# Plot with formulas
plot(cos, 0, 2*pi)
plot(exp, 0, 5)
# Plot with formulas
plot(cos, 0, 2*pi, col='red')
# Plot with formulas
plot(cos, 0, 2*pi, col='red', lwd=5)
head(mtcars)
cylinders <- table(mtcars$cyl)
View(breast_cancer)
cylinders <- table(mtcars$cyl)
barplot(cylinders)
plot(cylinders)
barplot(cylinders)
hist(iris$Sepal.Length)
par(mfrow=c(3,1))
par(mfrow=c(3,1))
hist(iris$Petal.Length[iris$Species == 'setosa'],
xlim = c(0,3),
breaks = 9,
main = 'Petal length for setosa',
xlab = '',
col = 'red')
hist(iris$Petal.Width[iris$Species == 'versiColor'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'versicolor'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'virginca'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'Virginca'],
xlim = c(0,3),
breaks = 9)
hist(iris$Petal.Width[iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9)
par(mfrow=c(1,1))
hist(iris$Petal.Width[iris$Species == 'virginica'],
xlim = c(0,3),
breaks = 9)
#univariate
hist(mtcars$wt)
hist(mtcars$mpg)
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = 'red',
xlab = 'wt',
ylab = 'mpg')
?lynx
head(lynx)
hist(lynx)
hist(lynx,
breaks = 14,
freq = FALSE,
col = 'thistle1',
main = paste('Histogram of Annual Canadian Lynx', 'Trappings', '183-32'))
curve(
dnorm(x, mean = mean(lynx), sd = sd(lynx
),
col = 'thistle4',
lwd=2,
add = TRUE)
)
curve(
dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = 'thistle4',
lwd=2,
add = TRUE)
lines(density(lynx), col = 'blue', lwd = 2)
lines(density(lynx, adjust = 3))
# Rug plot
rug(lynx, lwd = 2, col = 'gray
')
# Rug plot
rug(lynx, lwd = 2, col = 'gray')
summary(iris$Species)
summary(iris$Sepal.Length)
summary(iris)
install.packages('psych')
library(psych)
describe(iris$Sepal.Length)
describe(iris)
iris$Petal.Length[iris$Petal.Length < 2
]
count(iris$Petal.Length[iris$Petal.Length < 2
])
install.packages('rio')
# Using pipe
efficiency <- cars %>%
select(Fuel.Consumption, Cylinders, Transmission) %>%
filter(Transmission== 'Automatic') %>%
mutate(Consumption = Fuel.Economy * 0.425) %>%
group_by(Cylinders) %>%
summarize(Avg.Consumption = mean(Consumption)) %>%
arrange(desc(Avg.Consumption)) %>%
as.data.frame()
# Using pipe
efficiency <- cars %>%
select(Fuel.Consumption, Cylinders, Transmission) %>%
filter(Transmission== 'Automatic') %>%
mutate(Consumption = Fuel.Economy * 0.425) %>%
group_by(Cylinders) %>%
summarize(Avg.Consumption = mean(Consumption)) %>%
arrange(desc(Avg.Consumption)) %>%
as.data.frame()
setwd('~/Artificial Intelligence/R-ML-Projects/mtcars')
cars <- read.table(
file = 'Cars.txt',
header = TRUE,
sep = '\t',
quote = "\""
)
head(cars)
# load dplyr package
library(dplyr)
# select a subset of columns
temp <- select(
.data = cars,
Transmission,
Cylinders,
Fuel.Economy
)
head(temp)
# filter a subset of columns
temp <- filter(
.data = temp,
Transmission == 'Automatic'
)
head(temp)
# compute a new column
temp <- mutate(
.data = temp,
Consumption = Fuel.Economy * 0.425
)
head(temp)
# Group by column
temp <- group_by(
.data = temp,
Cylinders
)
temp
# aggregate based on groups
temp <- summarize(
.data = temp,
Avg.Consumption = mean(Consumption)
)
temp
# Arrange the rows in descending order
temp <- arrange(
.data = temp,
desc(Avg.Consumption)
)
head(temp)
# convert tibble back to dataframe
efficiency <- as.data.frame(temp)
efficiency
# Using pipe
efficiency <- cars %>%
select(Fuel.Consumption, Cylinders, Transmission) %>%
filter(Transmission== 'Automatic') %>%
mutate(Consumption = Fuel.Economy * 0.425) %>%
group_by(Cylinders) %>%
summarize(Avg.Consumption = mean(Consumption)) %>%
arrange(desc(Avg.Consumption)) %>%
as.data.frame()
# Using pipe
efficiency <- cars %>%
select(Fuel.Economy, Cylinders, Transmission) %>%
filter(Transmission== 'Automatic') %>%
mutate(Consumption = Fuel.Economy * 0.425) %>%
group_by(Cylinders) %>%
summarize(Avg.Consumption = mean(Consumption)) %>%
arrange(desc(Avg.Consumption)) %>%
as.data.frame()
efficiency
# save the results to a csv file
write.csv(
x = efficiency,
file = 'Fuel Efficiency',
row.names = FALSE
)
ls
setwd('~/Artificial Intelligence/R-ML-Projects/mtcars')
cars <- read.csv('Cars.csv')
head(cars)
# Create frequency table
table(cars$Transmission)
# Get the minimum value
min(cars$Fuel.Economy)
# Get the maximum value
max(cars$Fuel.Economy)
# get the average
mean(cars$Fuel.Economy)
# median
median(cars$Fuel.Economy)
# get quartiles
quantile(cars$Fuel.Economy)
# standard deviation
sd(cars$Fuel.Economy)
# total value
sum(cars$Fuel.Economy)
# correlation coefficients
cor(
x = cars$Cylinders,
y = cars$Fuel.Economy
)
# summarize an entire table
summary(cars)
setwd('~/Artificial Intelligence/R-ML-Projects/mtcars')
cars <- read.csv('Cars.csv')
library(ggplot2)
# create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)
)
# create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)
) + geom_bar()
# create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)
) + geom_bar() + ggtitle('Count of cars by Transmission Type')
+ ylab('Count of Cars')
# create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)
) + geom_bar() + ggtitle('Count of cars by Transmission Type')
# create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)
) + geom_bar() + ggtitle('Count of cars by Transmission Type')
+ ylab('Count of Cars')
+ xlab('Transmisson Tye')
# create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)
) + geom_bar() + ggtitle('Count of cars by Transmission Type') + ylab('Count of Cars')
+ xlab('Transmisson Tye')
# create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)
) + geom_bar() + ggtitle('Count of cars by Transmission Type') + ylab('Count of Cars')+ xlab('Transmisson Tye')
gggplot(
data = cars,
aes(x = Fuel.Economy)
) + geom_histogram(bins = 10) + ggtitle('Distribution of fuel Economy') + xlab('Fuel Economy')
ggplot(
data = cars,
aes(x = Fuel.Economy)
) + geom_histogram(bins = 10) + ggtitle('Distribution of fuel Economy') + xlab('Fuel Economy')
+ ylab('Count of cars')
+ geom_histogram(bins = 10) + ggtitle('Distribution of fuel Economy') + xlab('Fuel Economy')
ggplot(
data = cars,
aes(x = Fuel.Economy))
+ geom_histogram(bins = 10) + ggtitle('Distribution of fuel Economy') + xlab('Fuel Economy')
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(bins = 10) +
ggtitle('Distribution of fuel Economy') +
xlab('Fuel Economy') +
ylab('Count of cars')
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(bins = 10) +
ggtitle('Distribution of fuel Economy') +
xlab('Fuel Economy') +
ylab('Count of cars')
# Density plot
ggplot(
data = cars,
aes(x = Fuel.Economy)
) +
geom_density() +
ggtitle('Distribution of fuel Economy')
# Create scatter plot
ggplot(
data = cars,
aes(x = Cylinders, y = Fuel.Economy)
) +
geom_point()
# Create scatter plot
ggplot(
data = cars,
aes(x = Cylinders, y = Fuel.Economy)
) +
geom_point() +
ggtitle('Scatter Plot')
ggplot(
data = cars,
aes(x = cylinders)
) + geom_boxplot()
ggplot(
data = cars,
aes(x = cylinders, y = Transmission)
) + geom_boxplot()
ggplot(
data = cars,
aes(x = Transmission)
) + geom_boxplot()
cars$Cylinders <-  as.factor(cars$Cylinders)
ggplot(
data = cars,
aes(x = Cylinders)
) + geom_boxplot()
head(iris)
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
main = 'Iris Petal Length vs Petal Width',
xlab = 'Petal Length',
ylab = 'Petal Width'
)
# Simple Linear Regression Model
model <- lm(
formula = Petal.Width ~ Petal.Length,
data = iris
)
summary(model)
# Draw the regression line plot
lines(
x = iris$Petal.Length,
y = model$fitted,
col = 'red',
lwd = 3
)
# Get the correlation coefficient
cor(
x = iris$Petal.Length,
y = iris$Petal.Width
)
predict(
object = model,
newdata = data.frame(
Petal.Length = c(2,5,7)
)
)
predict(
object = model,
newdata = data.frame(
Petal.Length = 2
)
)
predict(
object = model,
newdata = data.frame(
Petal.Length = c(5,10, 15)
)
)
install.packages('ff')
# assume big data
library(ff)
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes <- sample(x = 1:150, size = 100)
# inspect the random indexes
print(indexes)
# create the training dataset
train <- iris[indexes, ]
# create the test
test <- iris[-indexes, ]
install.packages(tree)
install.packages('tree')
install.packages("tree")
install.packages("RColorBrewer")
# inspect the random indexes
print(indexes)
